模版：
<!DOCTYPE html>
<html lang="zh-cn">
<head>
	<meta charset="utf-8"/>
	<title>标题</title>
	<style type="text/css">
	
	</style>
</head>

<body>

</body>
<script type="text/javascript">

</script>
</html>


html大小写不敏感，推荐使用小写


注释
<!-- 注释内容 -->
<!--
注释内容
注释内容
-->

标题
<h1>一级标题(最大)</h1>
...
<h6>六级标题(最小)</h6>

段落
<p>文字</p>

链接
//href(hypertext reference,超文本引用)
<a href="http://www.bilibili.com/" target="_self">显示文字</a>
target属性：
_self:默认,在本窗口打开
_blank:新窗口打开
_parent:在父框架中打开
_top:在最上层父框架中打开
FRAMENAME:在指定框架名的框架中打开





图像
<img src="test.jpg" width="100" height="100" alt="无法加载时的代表文字"/>

水平线
hr(horizontal rule，水平尺)
<hr/>

换行
br（break，换行）
<br/>



空元素(自闭合标签):没有内容的元素
如:图片<img />   换行<br/>   水平分割线<hr/>   元数据<meta />
<!DOCTYPE html>不是html标签,只是一个标识,无需自闭合

属性：
属性与属性值推荐小写
属性值用双引号/单引号包裹，但当属性值本身有双引号时用单引号包裹


CSS内联样式
style属性

【弃用的标签与属性:（用样式代替）】
<ccenter>
<font> <basefont>
<s> <strike>
<u>

align
bgcolor
color

用style属性:
背景色 前景色 字体 字号 对齐
<p style="background-color=yellow;color:red;font-family:arial;font-size:20px;text-align:center">文字</p>




文本格式化标签:
<b>粗体
<i>斜体
<del>删除线
<ins>下划线
<sub>下标
<sup>上标
<em>    弱的强调 斜体 局部
<strong>强的强调 黑体 全局
<big>大号字体
<small>小号字体

计算机输出标签：
<code>代码
<kbd>键盘码
<samp>代码样本
<tt>打字机
<var>变量
<pre>预格式

引用与术语标签：
<abbr>缩写（点下划线）
<acronym>首字母缩写（点下划线）
<address>地址
<bdo dir="rtl|ltr">文字方向
<blockquote>块引用，长的引用(换行和外边距)
<q>短的引用（引号）
<cite>引用，引证
<dfn>定义


颜色:
颜色名(16种)：
====================
aqua水蓝
black
blue
fuchsia桃红
gray
green
lime石灰
maroon紫红
navy
olive
purple
red
silver
teal蓝绿色
white
yellow
====================
十六进制颜色码:
#ffffff




CSS样式:
外部样式：
<link rel="stylesheet" type="text/css" href="mystyle.css">

内部样式：
<head>

<style type="text/css">
body {background-color: red}
p {margin-left: 20px}
</style>

</head>

内联样式：
<p style="color=red">文字</p>



链接
a(anchor,锚)
<a href="https://www.bilibili.com/" target="_blank">打开B站</a>
页内跳转
<a href="#idvalue">显示文字</a>
跨页跳转
<a href="test.html#idvalue">显示文字</a>


表格:
border默认为0,可以大于1
tr(table row)
td(table data)
th(table heading)
空单元格<td></td>空白不带边框
空字符单元格<td>&nbsp;</td>空白带边框
跨行rowspan="2"
跨列colspan="3"

<table border="1">
<caption>表格的标题</caption>
	<tr>
		<th>左上表头</th>
		<th>横表头</th>
		<th>横表头</th>
	<tr>
		<th>竖表头</th>
		<td>11</td>
		<td>12</td>
	<tr>
	<tr>
		<th>竖表头</th>
		<td>21</td>
		<td>22</td>
	<tr>
</table>




列表
有序列表ol(ordered list)
无序列表ul(unordered list)
列表项li(list item)

<ol>
	<li>1</li>
	<li>2</li>
	<li>3</li>
</ol>

<ul>
	<li>苹果</li>
	<li>菠萝</li>
	<li>葡萄</li>
</ul>




块:
块级元素:前面加折行
内联元素:
div(division,分割)
span（范围）
<div>通用的块容器，无实义</div>
<span>通用的内联容器，无实义</span>


类：
class属性
可以把具有相同特点的标签设置相同的类名，便于css统一修改样式
css用.classname{...}选择
<p class="属性名">文字</p>


id:
id属性用于元素指定唯一的id。
一个HTML文档中不能存在多个有相同id的元素。
id 名称对大小写敏感！
id 必须包含至少一个字符，且不能包含空白字符（空格、制表符等）。
css用#idvalue{...}选择
<p id="someid">文字</p>


内联框架：
在页面内显示页面(aka套娃)
<iframe src="test.html" width="200" height="200" frameborder="1"></iframe>
使用iframe作为链接目标
为iframe设置name属性，为链接设置target属性(值为iframe的name值)
<iframe src="some.html" name="iframe_a"></iframe>
<a href="https://www.bilibili.com" target="iframe_a">open bilibili in iframe</a>



JavaScript
<script>详细见JS
<nocript>定义不支持或禁用脚本的替代显示内容
<noscript>抱歉，您的浏览器不支持 JavaScript！</noscrirpt>


路径：
相对路径(尽量用);
<img src="a.jpg"/>            当前文件夹下的a.jpg
<img src="images/a.jpg"/>     当前文件夹下的images下的a.jpg
<img src="/images/a.jpg"/>    站点根目录下的images下的a.jpg
<img src="../a.jpg"/>         父文件夹下的a.jpg
绝对路径：
<img src="http://example.com/images/a.jpg"/>            当前文件夹下的a.jpg
<img src="file:///e:/images/a.jpg"/>     当前文件夹下的images下的a.jpg





头部元素容器<head>
以下标签都可以添加到 head 部分：<title>、<base>、<link>、<meta>、<script> 以及 <style>。
<title>略，定义标题
<base href="..." target="...">定义页面上所有链接的默认地址或默认目标，当链接缺少url和target时将使用base定义的值。
	在一个文档中，最多能使用一个 <base> 元素。<base> 标签必须位于 <head> 元素内部。
	请把 <base> 标签排在 <head> 元素中第一个元素的位置，这样 head 区域中其他元素就可以使用 <base> 元素中的信息了。
	如果使用了 <base> 标签，则必须具备 href 属性或者 target 属性或者两个属性都具备。
<link>定义文档与外部资源的关系(最常用于定义外部css)
	<link rel="stylesheet" type="text/css" href="mystyle.css" />
<style>定义内部css
	<style type="text/css">
	body {background-color:yellow}
	p {color:blue}
	</style>
<meta>定义元数据。元数据不会显示在页面上，但是对于机器是可读的。
	<meta charset="utf-8"/>
	<meta name="..." content="..."/>
	<meta http-equiv="..." content="..."/>
name=application-name|author|description|generator|keywords
http-equiv=content-type|default-type|refresh




如：
定义关键字：
<meta name="keywords" content="HTML, CSS, XML, XHTML, JavaScript"/>
定义页面描述：
<meta name="description" content="Free Web tutorials on HTML and CSS"/>
定义作者：
<meta name="author" content="Hege Refsnes">
定义版权：
<meta name="copyright" content="NetEase">
定义编辑器：
<meta name="generator" content="Dreamweaver">
定时刷新：
<meta http-equiv="refresh" content="30">//30s后刷新本页
<meta http-equiv="refresh" content="30;url=http://www.baidu.com">//30s后跳转到指定yrl
设置页面过期时间(不使用缓存，强制再次向服务器请求页面)：
秒数：＜meta http-equiv="expires" content="秒数"＞秒数<=0表示每次打开页面
时间：＜meta http-equiv="expires" content="Wed, 20 Jun 2007 22:33:00 GMT"＞
定义机器人向导:
<meta name="robots" contect= "all|none|index|noindex|follow|nofollow"/>
	
	
	
	
	
	
	
	
语义元素：
<article>：文章
<aside>：页面内容以外的内容
<details>：细节
<figcaption>：<figure>的标题
<figure>：自包含内容：如图示，图表，照片，代码清单
<footer>：页脚
<header>：页眉
<main>：主体内容
<mark>：强调内容
<nav>：导航链接
<section>：文档的节
<summary>：<details>的可见标题
<time>：日期或时间


转义字符：
==============
空格    &nbsp;
<		&lt;
>		&gt;
&		&amp;
"		&quot;
'		&apos;
￠		&cent;
£		&pound;
¥		&yen;
€		&euro;
§		&sect;
©		&copy;
® 		&reg;
™		&trade;
×		&times;
÷		&divide;
================



url:
scheme://host.domain:port/path/filename
scheme:因特网服务类型，如http,https,ftp,file

URL 编码
URL 只能使用 ASCII 字符集来通过因特网进行发送。
由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。
URL 编码使用 "%" 其后跟随两位的十六进制数来替换非 ASCII 字符。
URL 不能包含空格。URL 编码通常使用 + 来替换空格。

框架：
<frameset rows="25%,50%,25%">
	<frame src="xxx1.html">
	<frame src="xxx2.html">
	<frame src="xxx3.html">
</frameset>




表单：
每个输入都要有name属性，否则无法被php接收解析处理
<form action="test.php" method="post" target="_self">
	用户名：
	<input type="text" name="username" value="默认用户名"/>
	电话：
	<input type="number" name="usertel" value="11111111111"/>
	密码：
	<input type="password" name="userpasswd"/>
	性别：
	<input type="radio" name="usergender" value="male" checked/>Male
	<input type="radio" name="usergender" value="female"/>Female
	生日：
	<input type="date" name="userbirth" min="1800-01-01" max="2999-12-31">
	国籍：
	<select name="usercountry">
		<option value="china">中国</option>
		<option value="usa">美国</option>
		<option value="uk">英国</option>
	</select>
	通知：
	<input type="checkbox" name="usernotification" value="allowPush"/>允许接收推送
	<input type="checkbox" name="usernotification" value="allowemail"/>订阅邮件
	介绍:
	<textarea name="userintro" rows="10" cols="30">
		hello word.
	</textarea>
	按钮：
	<button type="button" onclick="alert('Hello World!')">点击一下</button>
	提交：
	<input type="submit" value="注册"/>
</form>

method：get|post
get：默认|明文|不要有敏感信息,地址栏可见|适用少量数据提交，浏览器有容量限制
post:    |密文|包含敏感信息时务必要使用post|可发送大量数据，没有大小限制

radio单选按钮:适用少量多选一
select下拉列表:适用大量多选一

input.type=text|number|password|radio|checkbox|button(配合JS使用)|submit|color|data|datatime-local|time|range(滑动条)|hidden(隐藏字段)|file(文件上传)|image(图片按钮默认功能为提交)|reset(重置)
输入数字:(类似spin)
<input type="number" name="" min="-10", max="5" step="0.1" value="3">
输入数字:(类似滑动条)
<input type="range" name="" min="-10" max="5" step="0.1" value="3">

输入颜色:
<input type="color" name="favcolor"/>

输入日期:
<input type="date" name="" min="1980-01-01" max="2999-12-31">
<input type="month" name="bdaymonth">
<input type="week" name="week_year">
<input type="time" name="usr_time">

表单元素属性:
有值:
value(默认值)
placeholder(占位符|提示)
pattern(正则表达式|会检查)
无值：
multiple(多文件上传|适用于type="file")
readonly(只读)
disabled(禁用|不会被提交)
required(必须填写)





画布：
HTML5的canvas元素使用JavaScript在网页上绘制图像。
规定元素的 id、宽度和高度：
<canvas id="myCanvas" width="200" height="100"></canvas>
canvas元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：
<script type="text/javascript">
var c=document.getElementById("myCanvas");
var cxt=c.getContext("2d");
cxt.fillStyle="#FF0000";
cxt.fillRect(0,0,150,75);
</script>
坐标系：
(0,0)--->x
|
|
|
v


html5-SVG(Scalable Vector Graphics,可伸缩矢量图形)
<svg>
...详情见SVG教程
</svg>


对比canvas与svg:
canvas:
	依赖分辨率
	不支持事件处理器
	弱的文本渲染能力
	能够以 .png 或 .jpg 格式保存结果图像
	最适合图像密集型的游戏，其中的许多对象会被频繁重绘
svg:
	不依赖分辨率
	支持事件处理器
	最适合带有大型渲染区域的应用程序（比如谷歌地图）
	复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）
	不适合游戏应用
	
	
嵌入(音频，视频等)：
<embed src="test.mp3"/>
<embed src="test.mp4"/>


audio标签:
<audio autoplay controls looop muted preload src>
	<source src="test.mp3" type="audio/mp3"/>
	<source src="test.ogg" type="audio/ogg"/>
</audio>

video标签；
<video autoplay controls looop muted preload src>
	<source src="test.mp4" type="video/mp4"/>
	<source src="test.ogg" type="video/ogg"/>
</video>



